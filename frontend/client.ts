// Code generated by the Encore v1.49.1 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-hospitality-management-platform-cr8i.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the hospitality-management-platform-cr8i Encore application.
 */
export default class Client {
    public readonly analytics: analytics.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly branding: branding.ServiceClient
    public readonly finance: finance.ServiceClient
    public readonly frontend: frontend.ServiceClient
    public readonly orgs: orgs.ServiceClient
    public readonly properties: properties.ServiceClient
    public readonly seed: seed.ServiceClient
    public readonly staff: staff.ServiceClient
    public readonly tasks: tasks.ServiceClient
    public readonly uploads: uploads.ServiceClient
    public readonly users: users.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.analytics = new analytics.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.branding = new branding.ServiceClient(base)
        this.finance = new finance.ServiceClient(base)
        this.frontend = new frontend.ServiceClient(base)
        this.orgs = new orgs.ServiceClient(base)
        this.properties = new properties.ServiceClient(base)
        this.seed = new seed.ServiceClient(base)
        this.staff = new staff.ServiceClient(base)
        this.tasks = new tasks.ServiceClient(base)
        this.uploads = new uploads.ServiceClient(base)
        this.users = new users.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: auth.AuthParams | AuthDataGenerator
}

export namespace analytics {
    export interface OverviewMetrics {
        occupancyRate: number
        adr: number
        revpar: number
        totalRevenue: number
        totalExpenses: number
        netIncome: number
        totalBookings: number
        totalGuests: number
        averageStayLength: number
        taskCompletionRate: number
        staffUtilization: number
    }

    export interface OverviewRequest {
        propertyId?: number
        regionId?: number
        startDate?: string
        endDate?: string
    }

    export interface OverviewResponse {
        metrics: OverviewMetrics
        period: {
            startDate: string
            endDate: string
        }
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.overview = this.overview.bind(this)
        }

        /**
         * Gets analytics overview with role-based filtering
         */
        public async overview(params: OverviewRequest): Promise<OverviewResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:    params.endDate,
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                regionId:   params.regionId === undefined ? undefined : String(params.regionId),
                startDate:  params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analytics/overview`, undefined, {query})
            return await resp.json() as OverviewResponse
        }
    }
}

export namespace auth {
    export interface AuthData {
        userID: string
        orgId: number
        role: UserRole
        email: string
        displayName: string
        createdByUserId?: number
    }

    export interface AuthParams {
        authorization?: string
    }

    export interface ForgotPasswordRequest {
        email: string
    }

    export interface ForgotPasswordResponse {
        success: boolean
        message: string
    }

    export interface LoginRequest {
        email: string
        password: string
    }

    export interface LoginResponse {
        accessToken: string
        refreshToken: string
        user: {
            id: number
            email: string
            displayName: string
            role: UserRole
            orgId: number
        }
    }

    export interface LogoutRequest {
        refreshToken: string
    }

    export interface MeResponse {
        user: AuthData
        permissions: string[]
    }

    export interface RefreshRequest {
        refreshToken: string
    }

    export interface RefreshResponse {
        accessToken: string
        refreshToken: string
    }

    export interface ResetPasswordRequest {
        token: string
        newPassword: string
    }

    export interface ResetPasswordResponse {
        success: boolean
        message: string
    }

    export interface SignupRequest {
        email: string
        password: string
        displayName: string
        organizationName: string
        subdomainPrefix: string
    }

    export interface SignupResponse {
        accessToken: string
        refreshToken: string
        user: {
            id: number
            email: string
            displayName: string
            role: UserRole
            orgId: number
        }
    }

    export type UserRole = "ADMIN" | "MANAGER"

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.forgotPassword = this.forgotPassword.bind(this)
            this.login = this.login.bind(this)
            this.logout = this.logout.bind(this)
            this.me = this.me.bind(this)
            this.refresh = this.refresh.bind(this)
            this.resetPassword = this.resetPassword.bind(this)
            this.signup = this.signup.bind(this)
        }

        /**
         * Initiates password reset process
         */
        public async forgotPassword(params: ForgotPasswordRequest): Promise<ForgotPasswordResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/forgot-password`, JSON.stringify(params))
            return await resp.json() as ForgotPasswordResponse
        }

        /**
         * Authenticates user and returns JWT tokens
         */
        public async login(params: LoginRequest): Promise<LoginResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/login`, JSON.stringify(params))
            return await resp.json() as LoginResponse
        }

        /**
         * Logs out user by invalidating refresh token
         */
        public async logout(params: LogoutRequest): Promise<void> {
            await this.baseClient.callTypedAPI("POST", `/auth/logout`, JSON.stringify(params))
        }

        /**
         * Returns current user information and permissions
         */
        public async me(): Promise<MeResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/auth/me`)
            return await resp.json() as MeResponse
        }

        /**
         * Refreshes access token using refresh token
         */
        public async refresh(params: RefreshRequest): Promise<RefreshResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/refresh`, JSON.stringify(params))
            return await resp.json() as RefreshResponse
        }

        /**
         * Resets password using reset token
         */
        public async resetPassword(params: ResetPasswordRequest): Promise<ResetPasswordResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/reset-password`, JSON.stringify(params))
            return await resp.json() as ResetPasswordResponse
        }

        /**
         * Creates a new admin user and organization
         */
        public async signup(params: SignupRequest): Promise<SignupResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/auth/signup`, JSON.stringify(params))
            return await resp.json() as SignupResponse
        }
    }
}

export namespace branding {
    export interface GetThemeResponse {
        theme: Theme
    }

    export interface ServeLogoResponse {
        fileData: string
        mimeType: string
    }

    export interface Theme {
        brandName: string
        logoUrl?: string
        primaryColor: string
        secondaryColor: string
        accentColor: string
        backgroundColor: string
        textColor: string
        currency: string
        dateFormat: string
        timeFormat: string
    }

    export interface UpdateThemeRequest {
        brandName?: string
        logoUrl?: string
        primaryColor?: string
        secondaryColor?: string
        accentColor?: string
        backgroundColor?: string
        textColor?: string
        currency?: string
        dateFormat?: string
        timeFormat?: string
    }

    export interface UpdateThemeResponse {
        success: boolean
    }

    export interface UploadLogoRequest {
        fileData: string
        filename: string
        mimeType: string
    }

    export interface UploadLogoResponse {
        logoUrl: string
        filename: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.cleanupCorruptedTheme = this.cleanupCorruptedTheme.bind(this)
            this.getTheme = this.getTheme.bind(this)
            this.serveLogo = this.serveLogo.bind(this)
            this.updateTheme = this.updateTheme.bind(this)
            this.uploadLogo = this.uploadLogo.bind(this)
        }

        /**
         * Helper function to clean up corrupted theme data
         */
        public async cleanupCorruptedTheme(): Promise<{
    /**
     * Helper function to clean up corrupted theme data
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/branding/cleanup-theme`)
            return await resp.json() as {
    /**
     * Helper function to clean up corrupted theme data
     */
    success: boolean
}
        }

        /**
         * Gets the theme configuration for the organization
         */
        public async getTheme(): Promise<GetThemeResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/branding/theme`)
            return await resp.json() as GetThemeResponse
        }

        /**
         * Serve organization logo
         */
        public async serveLogo(orgId: string, filename: string): Promise<ServeLogoResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/branding/logo/${encodeURIComponent(orgId)}/${encodeURIComponent(filename)}`)
            return await resp.json() as ServeLogoResponse
        }

        /**
         * Updates the theme configuration for the organization
         */
        public async updateTheme(params: UpdateThemeRequest): Promise<UpdateThemeResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/branding/theme`, JSON.stringify(params))
            return await resp.json() as UpdateThemeResponse
        }

        /**
         * Upload organization logo
         */
        public async uploadLogo(params: UploadLogoRequest): Promise<UploadLogoResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/branding/logo`, JSON.stringify(params))
            return await resp.json() as UploadLogoResponse
        }
    }
}

export namespace finance {
    export interface AddExpenseRequest {
        propertyId: number
        category: string
        amountCents: number
        currency?: string
        description?: string
        receiptUrl?: string
        receiptFileId?: number
        expenseDate: string
        paymentMode?: "cash" | "bank"
        bankReference?: string
    }

    export interface AddExpenseResponse {
        id: number
        propertyId: number
        category: string
        amountCents: number
        currency: string
        description?: string
        receiptUrl?: string
        receiptFileId?: number
        expenseDate: string
        paymentMode: string
        bankReference?: string
        createdByUserId: number
        createdAt: string
    }

    export interface AddRevenueRequest {
        propertyId: number
        source: "room" | "addon" | "other"
        amountCents: number
        currency?: string
        description?: string
        receiptUrl?: string
        receiptFileId?: number
        occurredAt: string
        paymentMode?: "cash" | "bank"
        bankReference?: string
    }

    export interface AddRevenueResponse {
        id: number
        propertyId: number
        source: string
        amountCents: number
        currency: string
        description?: string
        receiptUrl?: string
        receiptFileId?: number
        occurredAt: string
        paymentMode: string
        bankReference?: string
        createdByUserId: number
        createdAt: string
    }

    export interface ApproveExpenseRequest {
        id: number
        approved: boolean
        notes?: string
    }

    export interface ApproveExpenseResponse {
        success: boolean
        expenseId: number
        status: string
    }

    export interface ApproveRevenueRequest {
        id: number
        approved: boolean
        notes?: string
    }

    export interface ApproveRevenueResponse {
        success: boolean
        revenueId: number
        status: string
    }

    export interface BankAccount {
        id: string
        bankName: string
        accountNumber: string
        accountType: "checking" | "savings" | "business"
        balance: number
        currency: string
        lastSyncAt?: string
        isActive: boolean
    }

    export interface BankSyncRequest {
        accountId?: string
        startDate?: string
        endDate?: string
    }

    export interface BankSyncResponse {
        accountsSynced: number
        transactionsImported: number
        duplicatesSkipped: number
        errors: string[]
        lastSyncAt: string
    }

    export interface CheckDailyApprovalResponse {
        canAddTransactions: boolean
        requiresApproval: boolean
        hasApprovalForToday: boolean
        hasUnapprovedTransactions: boolean
        lastApprovalDate?: string
        message?: string
    }

    export interface CheckNotificationsRequest {
        lastChecked?: string
        limit?: number
        types?: string[]
    }

    export interface CheckNotificationsResponse {
        notifications: NotificationInfo[]
        hasNewNotifications: boolean
        lastChecked: string
        summary: {
            total: number
            unread: number
            byType: { [key: string]: number }
        }
    }

    export interface DailyCashBalance {
        id: number
        propertyId: number
        propertyName: string
        balanceDate: string
        openingBalanceCents: number
        cashReceivedCents: number
        bankReceivedCents: number
        totalReceivedCents: number
        cashExpensesCents: number
        bankExpensesCents: number
        totalExpensesCents: number
        closingBalanceCents: number
        calculatedClosingBalanceCents: number
        createdAt: string
        updatedAt: string
    }

    export interface DailyReportRequest {
        propertyId?: number
        date?: string
        startDate?: string
        endDate?: string
    }

    export interface DailyReportRequest {
        propertyId?: number
        date?: string
        startDate?: string
        endDate?: string
    }

    export interface DailyReportResponse {
        date: string
        propertyId?: number
        propertyName?: string
        openingBalanceCents: number
        cashReceivedCents: number
        bankReceivedCents: number
        totalReceivedCents: number
        cashExpensesCents: number
        bankExpensesCents: number
        totalExpensesCents: number
        closingBalanceCents: number
        netCashFlowCents: number
        transactions: DailyTransaction[]
        cashBalance: DailyCashBalance | null
    }

    export interface DailyReportsListResponse {
        reports: DailyReportResponse[]
        summary: {
            totalOpeningBalanceCents: number
            totalCashReceivedCents: number
            totalBankReceivedCents: number
            totalCashExpensesCents: number
            totalBankExpensesCents: number
            totalClosingBalanceCents: number
        }
    }

    export interface DailyTransaction {
        id: number
        type: "revenue" | "expense"
        propertyId: number
        propertyName: string
        amountCents: number
        paymentMode: "cash" | "bank"
        bankReference?: string
        description?: string
        category?: string
        source?: string
        occurredAt: string
        createdByName: string
        status: string
    }

    export interface DebugTransactionStatusResponse {
        userId: number
        orgId: number
        role: string
        totalTransactions: number
        pendingCount: number
        approvedCount: number
        rejectedCount: number
        transactions: any[]
        debugInfo: {
            canAddTransactions: boolean
            hasUnapprovedTransactions: boolean
            message: string
        }
        error?: string
    }

    export interface ExpenseInfo {
        id: number
        propertyId: number
        propertyName: string
        category: string
        amountCents: number
        currency: string
        description?: string
        receiptUrl?: string
        receiptFileId?: number
        expenseDate: string
        paymentMode: string
        bankReference?: string
        status: string
        createdByUserId: number
        createdByName: string
        approvedByUserId?: number
        approvedByName?: string
        approvedAt?: string
        createdAt: string
    }

    export interface GetBankAccountsResponse {
        accounts: BankAccount[]
    }

    export interface GrantDailyApprovalRequest {
        managerUserId: number
        approvalDate: string
        notes?: string
    }

    export interface GrantDailyApprovalResponse {
        id: number
        managerUserId: number
        approvalDate: string
        approvedByAdminId: number
        approvedAt: string
        notes?: string
    }

    export interface ListExpensesRequest {
        propertyId?: number
        category?: string
        status?: string
        startDate?: string
        endDate?: string
    }

    export interface ListExpensesResponse {
        expenses: ExpenseInfo[]
        totalAmount: number
    }

    export interface ListPendingApprovalsResponse {
        pendingManagers: {
            managerId: number
            managerName: string
            unapprovedTransactionsCount: number
            lastTransactionDate: string
            lastApprovalDate?: string
            needsDailyApproval: boolean
            hasPendingTransactions: boolean
            pendingExpenses: number
            pendingRevenues: number
        }[]
    }

    export interface ListRevenuesRequest {
        propertyId?: number
        source?: string
        startDate?: string
        endDate?: string
    }

    export interface ListRevenuesResponse {
        revenues: RevenueInfo[]
        totalAmount: number
    }

    export interface NotificationInfo {
        id: number
        type: string
        payload: any
        createdAt: string
        readAt?: string
    }

    export interface ProfitLossData {
        totalRevenue: number
        totalExpenses: number
        netIncome: number
        profitMargin: number
        revenueBySource: {
            room: number
            addon: number
            other: number
        }
        expensesByCategory: { [key: string]: number }
    }

    export interface ProfitLossRequest {
        propertyId?: number
        startDate?: string
        endDate?: string
        includePending?: boolean
    }

    export interface ProfitLossResponse {
        data: ProfitLossData
        period: {
            startDate: string
            endDate: string
        }
        propertyId?: number
        propertyName?: string
    }

    export interface ReconcileTransactionRequest {
        bankTransactionId: string
        recordedTransactionId?: number
        recordedTransactionType?: "expense" | "revenue"
        action: "match" | "ignore" | "create_new"
    }

    export interface ReconcileTransactionResponse {
        success: boolean
        matchedTransactionId?: number
        message: string
    }

    export interface RevenueInfo {
        id: number
        propertyId: number
        propertyName: string
        source: string
        amountCents: number
        currency: string
        description?: string
        receiptUrl?: string
        receiptFileId?: number
        occurredAt: string
        paymentMode: string
        bankReference?: string
        status: string
        createdByUserId: number
        createdByName: string
        approvedByUserId?: number
        approvedByName?: string
        approvedAt?: string
        createdAt: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addExpense = this.addExpense.bind(this)
            this.addRevenue = this.addRevenue.bind(this)
            this.approveExpense = this.approveExpense.bind(this)
            this.approveRevenue = this.approveRevenue.bind(this)
            this.checkDailyApproval = this.checkDailyApproval.bind(this)
            this.checkNotifications = this.checkNotifications.bind(this)
            this.debugTransactionStatus = this.debugTransactionStatus.bind(this)
            this.getBankAccounts = this.getBankAccounts.bind(this)
            this.getDailyReport = this.getDailyReport.bind(this)
            this.getDailyReports = this.getDailyReports.bind(this)
            this.grantDailyApproval = this.grantDailyApproval.bind(this)
            this.listExpenses = this.listExpenses.bind(this)
            this.listPendingApprovals = this.listPendingApprovals.bind(this)
            this.listRevenues = this.listRevenues.bind(this)
            this.markNotificationsRead = this.markNotificationsRead.bind(this)
            this.profitLoss = this.profitLoss.bind(this)
            this.reconcileTransaction = this.reconcileTransaction.bind(this)
            this.syncBankTransactions = this.syncBankTransactions.bind(this)
            this.updateDailyCashBalance = this.updateDailyCashBalance.bind(this)
        }

        /**
         * Adds a new expense record
         */
        public async addExpense(params: AddExpenseRequest): Promise<AddExpenseResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/expenses`, JSON.stringify(params))
            return await resp.json() as AddExpenseResponse
        }

        /**
         * Adds a new revenue record
         */
        public async addRevenue(params: AddRevenueRequest): Promise<AddRevenueResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/revenues`, JSON.stringify(params))
            return await resp.json() as AddRevenueResponse
        }

        /**
         * Approves or rejects an expense
         */
        public async approveExpense(params: ApproveExpenseRequest): Promise<ApproveExpenseResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/expenses/approve`, JSON.stringify(params))
            return await resp.json() as ApproveExpenseResponse
        }

        /**
         * Approves or rejects a revenue
         */
        public async approveRevenue(params: ApproveRevenueRequest): Promise<ApproveRevenueResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/revenues/approve`, JSON.stringify(params))
            return await resp.json() as ApproveRevenueResponse
        }

        /**
         * Check if a manager can add new transactions based on daily approval workflow
         */
        public async checkDailyApproval(): Promise<CheckDailyApprovalResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/check-daily-approval`)
            return await resp.json() as CheckDailyApprovalResponse
        }

        /**
         * Enhanced notification system for all real-time updates
         */
        public async checkNotifications(params: CheckNotificationsRequest): Promise<CheckNotificationsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                lastChecked: params.lastChecked === undefined ? undefined : String(params.lastChecked),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                types:       params.types?.map((v) => v),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/notifications`, undefined, {query})
            return await resp.json() as CheckNotificationsResponse
        }

        /**
         * Debug endpoint to check transaction status for a manager
         */
        public async debugTransactionStatus(): Promise<DebugTransactionStatusResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/debug-transaction-status`)
            return await resp.json() as DebugTransactionStatusResponse
        }

        /**
         * Placeholder for retrieving connected bank accounts
         */
        public async getBankAccounts(): Promise<GetBankAccountsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/bank-accounts`)
            return await resp.json() as GetBankAccountsResponse
        }

        /**
         * Get daily financial report for a specific date
         */
        public async getDailyReport(params: DailyReportRequest): Promise<DailyReportResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                date:       params.date,
                endDate:    params.endDate,
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                startDate:  params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/daily-report`, undefined, {query})
            return await resp.json() as DailyReportResponse
        }

        /**
         * Get daily reports for a date range
         */
        public async getDailyReports(params: DailyReportRequest): Promise<DailyReportsListResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                date:       params.date,
                endDate:    params.endDate,
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                startDate:  params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/daily-reports`, undefined, {query})
            return await resp.json() as DailyReportsListResponse
        }

        /**
         * Grant daily approval for a manager (admin only)
         */
        public async grantDailyApproval(params: GrantDailyApprovalRequest): Promise<GrantDailyApprovalResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/grant-daily-approval`, JSON.stringify(params))
            return await resp.json() as GrantDailyApprovalResponse
        }

        /**
         * Lists expenses with filtering
         */
        public async listExpenses(params: ListExpensesRequest): Promise<ListExpensesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category:   params.category,
                endDate:    params.endDate,
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                startDate:  params.startDate,
                status:     params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/expenses`, undefined, {query})
            return await resp.json() as ListExpensesResponse
        }

        /**
         * List managers who need daily approval
         */
        public async listPendingApprovals(): Promise<ListPendingApprovalsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/pending-approvals`)
            return await resp.json() as ListPendingApprovalsResponse
        }

        /**
         * Lists revenues with filtering
         */
        public async listRevenues(params: ListRevenuesRequest): Promise<ListRevenuesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:    params.endDate,
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                source:     params.source,
                startDate:  params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/revenues`, undefined, {query})
            return await resp.json() as ListRevenuesResponse
        }

        /**
         * Mark notifications as read
         */
        public async markNotificationsRead(params: {
    /**
     * Mark notifications as read
     */
    notificationIds: number[]
}): Promise<{
    /**
     * Mark notifications as read
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/notifications/mark-read`, JSON.stringify(params))
            return await resp.json() as {
    /**
     * Mark notifications as read
     */
    success: boolean
}
        }

        /**
         * Gets profit and loss statement
         */
        public async profitLoss(params: ProfitLossRequest): Promise<ProfitLossResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:        params.endDate,
                includePending: params.includePending === undefined ? undefined : String(params.includePending),
                propertyId:     params.propertyId === undefined ? undefined : String(params.propertyId),
                startDate:      params.startDate,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/finance/profit-loss`, undefined, {query})
            return await resp.json() as ProfitLossResponse
        }

        /**
         * Placeholder for transaction reconciliation
         */
        public async reconcileTransaction(params: ReconcileTransactionRequest): Promise<ReconcileTransactionResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/reconcile-transaction`, JSON.stringify(params))
            return await resp.json() as ReconcileTransactionResponse
        }

        /**
         * Placeholder for future bank API integration
         * This will be implemented when integrating with specific bank APIs like Plaid, Yodlee, etc.
         */
        public async syncBankTransactions(params: BankSyncRequest): Promise<BankSyncResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/sync-bank-transactions`, JSON.stringify(params))
            return await resp.json() as BankSyncResponse
        }

        /**
         * Create or update daily cash balance
         */
        public async updateDailyCashBalance(params: {
    propertyId: number
    date: string
    openingBalanceCents: number
    cashReceivedCents: number
    bankReceivedCents: number
    cashExpensesCents: number
    bankExpensesCents: number
    closingBalanceCents: number
}): Promise<{
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/finance/daily-cash-balance`, JSON.stringify(params))
            return await resp.json() as {
    success: boolean
}
        }
    }
}

export namespace frontend {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.assets = this.assets.bind(this)
        }

        public async assets(path: string[]): Promise<void> {
            await this.baseClient.callTypedAPI("HEAD", `/frontend/${path.map(encodeURIComponent).join("/")}`)
        }
    }
}

export namespace orgs {
    export interface CreateOrgRequest {
        name: string
        subdomainPrefix: string
        primaryDomain?: string
    }

    export interface CreateOrgResponse {
        id: number
        name: string
        subdomainPrefix: string
        primaryDomain?: string
        themeJson: { [key: string]: any }
        createdAt: string
    }

    export interface InviteUserRequest {
        email: string
        role: auth.UserRole
    }

    export interface InviteUserResponse {
        inviteUrl: string
        token: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.invite = this.invite.bind(this)
        }

        /**
         * Creates a new organization (Admin only)
         */
        public async create(params: CreateOrgRequest): Promise<CreateOrgResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/orgs`, JSON.stringify(params))
            return await resp.json() as CreateOrgResponse
        }

        /**
         * Invites a user to join the organization (Admin only, invites MANAGERs)
         */
        public async invite(params: InviteUserRequest): Promise<InviteUserResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/orgs/invite`, JSON.stringify(params))
            return await resp.json() as InviteUserResponse
        }
    }
}

export namespace properties {
    export interface CreatePropertyRequest {
        name: string
        type: PropertyType
        regionId?: number
        address?: {
            street?: string
            city?: string
            state?: string
            country?: string
            zipCode?: string
        }
        amenities?: string[]
        capacity?: {
            totalRooms?: number
            totalBeds?: number
            maxGuests?: number
        }
    }

    export interface CreatePropertyResponse {
        id: number
        name: string
        type: PropertyType
        regionId?: number
        addressJson: { [key: string]: any }
        amenitiesJson: { [key: string]: any }
        capacityJson: { [key: string]: any }
        status: string
        createdAt: string
    }

    export interface GetOccupancyResponse {
        propertyId: number
        propertyName: string
        occupancy: OccupancyInfo
    }

    export interface ListPropertiesRequest {
        regionId?: number
        type?: PropertyType
    }

    export interface ListPropertiesResponse {
        properties: PropertyInfo[]
    }

    export interface OccupancyInfo {
        totalUnits: number
        occupiedUnits: number
        availableUnits: number
        outOfOrderUnits: number
        occupancyRate: number
        currentBookings: number
    }

    export interface PropertyInfo {
        id: number
        name: string
        type: PropertyType
        regionId?: number
        addressJson: { [key: string]: any }
        amenitiesJson: { [key: string]: any }
        capacityJson: { [key: string]: any }
        status: string
        createdAt: string
    }

    export type PropertyType = "hostel" | "hotel" | "resort" | "apartment"

    export interface UpdatePropertyRequest {
        name?: string
        type?: PropertyType
        regionId?: number | null
        address?: {
            street?: string
            city?: string
            state?: string
            country?: string
            zipCode?: string
        } | null
        amenities?: string[] | null
        capacity?: {
            totalRooms?: number | null
            totalBeds?: number | null
            maxGuests?: number | null
        } | null
        status?: string
    }

    export interface UpdatePropertyResponse {
        success: boolean
        id: number
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.getOccupancy = this.getOccupancy.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Creates a new property
         */
        public async create(params: CreatePropertyRequest): Promise<CreatePropertyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/properties`, JSON.stringify(params))
            return await resp.json() as CreatePropertyResponse
        }

        /**
         * Gets occupancy information for a property
         */
        public async getOccupancy(id: number): Promise<GetOccupancyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/properties/${encodeURIComponent(id)}/occupancy`)
            return await resp.json() as GetOccupancyResponse
        }

        /**
         * Lists properties with role-based filtering
         */
        public async list(params: ListPropertiesRequest): Promise<ListPropertiesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                regionId: params.regionId === undefined ? undefined : String(params.regionId),
                type:     params.type === undefined ? undefined : String(params.type),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/properties`, undefined, {query})
            return await resp.json() as ListPropertiesResponse
        }

        /**
         * Updates an existing property (Admin or Manager with access)
         */
        public async update(id: number, params: UpdatePropertyRequest): Promise<UpdatePropertyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/properties/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdatePropertyResponse
        }
    }
}

export namespace seed {
    export interface SeedDataResponse {
        success: boolean
        message: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.seedData = this.seedData.bind(this)
        }

        /**
         * Seeds the database with demo data
         */
        public async seedData(params: SeedDataResponse): Promise<void> {
            await this.baseClient.callTypedAPI("POST", `/seed/data`, JSON.stringify(params))
        }
    }
}

export namespace staff {
    export interface ApproveLeaveRequest {
        id: number
        approved: boolean
    }

    export interface ApproveLeaveResponse {
        success: boolean
        leaveRequestId: number
        status: string
    }

    export interface CreateScheduleRequest {
        staffId: number
        propertyId: number
        shiftDate: string
        startTime: string
        endTime: string
        breakMinutes?: number
        notes?: string
    }

    export interface CreateScheduleResponse {
        id: number
        staffId: number
        staffName: string
        propertyId: number
        propertyName: string
        shiftDate: string
        startTime: string
        endTime: string
        breakMinutes: number
        status: string
        notes?: string
        createdAt: string
    }

    export interface CreateStaffRequest {
        userId: number
        propertyId?: number
        department: "frontdesk" | "housekeeping" | "maintenance" | "fnb" | "admin"
        hourlyRateCents?: number
        hireDate?: string
        notes?: string
    }

    export interface CreateStaffResponse {
        id: number
        userId: number
        userName: string
        propertyId?: number
        propertyName?: string
        department: string
        hourlyRateCents: number
        performanceRating: number
        hireDate?: string
        notes?: string
        status: string
    }

    export interface LeaveRequestInfo {
        id: number
        staffId: number
        staffName: string
        leaveType: string
        startDate: string
        endDate: string
        reason?: string
        status: string
        approvedByUserId?: number
        approvedByName?: string
        approvedAt?: string
        createdAt: string
    }

    export interface ListLeaveRequestsRequest {
        staffId?: number
        status?: string
        leaveType?: string
    }

    export interface ListLeaveRequestsResponse {
        leaveRequests: LeaveRequestInfo[]
    }

    export interface ListSchedulesRequest {
        staffId?: number
        propertyId?: number
        startDate?: string
        endDate?: string
        status?: string
    }

    export interface ListSchedulesResponse {
        schedules: ScheduleInfo[]
    }

    export interface ListStaffRequest {
        propertyId?: number
        department?: string
        status?: string
    }

    export interface ListStaffResponse {
        staff: StaffInfo[]
    }

    export interface RequestLeaveRequest {
        leaveType: "vacation" | "sick" | "personal" | "emergency"
        startDate: string
        endDate: string
        reason?: string
    }

    export interface RequestLeaveResponse {
        id: number
        staffId: number
        leaveType: string
        startDate: string
        endDate: string
        reason?: string
        status: string
        createdAt: string
    }

    export interface ScheduleInfo {
        id: number
        staffId: number
        staffName: string
        propertyId: number
        propertyName: string
        shiftDate: string
        startTime: string
        endTime: string
        breakMinutes: number
        status: string
        notes?: string
        createdAt: string
    }

    export interface StaffInfo {
        id: number
        userId: number
        userName: string
        userEmail: string
        propertyId?: number
        propertyName?: string
        department: string
        hourlyRateCents: number
        performanceRating: number
        hireDate?: string
        notes?: string
        status: string
    }

    export interface UpdatePerformanceRequest {
        id: number
        performanceRating: number
        notes?: string
    }

    export interface UpdatePerformanceResponse {
        success: boolean
        staffId: number
        performanceRating: number
    }

    export interface CheckInRequest {
        staffId: number
        notes?: string
        location?: {
            latitude: number
            longitude: number
        }
    }

    export interface CheckInResponse {
        success: boolean
        attendanceId: number
        checkInTime: string
        status: string
        message: string
    }

    export interface CheckOutRequest {
        staffId: number
        notes?: string
        location?: {
            latitude: number
            longitude: number
        }
    }

    export interface CheckOutResponse {
        success: boolean
        attendanceId: number
        checkOutTime: string
        totalHours: number
        overtimeHours: number
        status: string
        message: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.approveLeave = this.approveLeave.bind(this)
            this.checkIn = this.checkIn.bind(this)
            this.checkOut = this.checkOut.bind(this)
            this.create = this.create.bind(this)
            this.createSchedule = this.createSchedule.bind(this)
            this.list = this.list.bind(this)
            this.listLeaveRequests = this.listLeaveRequests.bind(this)
            this.listSchedules = this.listSchedules.bind(this)
            this.requestLeave = this.requestLeave.bind(this)
            this.updatePerformance = this.updatePerformance.bind(this)
        }

        /**
         * Approves or rejects a leave request
         */
        public async approveLeave(params: ApproveLeaveRequest): Promise<ApproveLeaveResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/staff/leave/approve`, JSON.stringify(params))
            return await resp.json() as ApproveLeaveResponse
        }

        /**
         * Staff check-in endpoint with validation
         */
        public async checkIn(staffId: number, params: CheckInRequest): Promise<CheckInResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/staff/${encodeURIComponent(staffId)}/check-in`, JSON.stringify(params))
            return await resp.json() as CheckInResponse
        }

        /**
         * Staff check-out endpoint with hours calculation
         */
        public async checkOut(staffId: number, params: CheckOutRequest): Promise<CheckOutResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/staff/${encodeURIComponent(staffId)}/check-out`, JSON.stringify(params))
            return await resp.json() as CheckOutResponse
        }

        /**
         * Creates a new staff record
         */
        public async create(params: CreateStaffRequest): Promise<CreateStaffResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/staff`, JSON.stringify(params))
            return await resp.json() as CreateStaffResponse
        }

        /**
         * Creates a new staff schedule
         */
        public async createSchedule(params: CreateScheduleRequest): Promise<CreateScheduleResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/staff/schedules`, JSON.stringify(params))
            return await resp.json() as CreateScheduleResponse
        }

        /**
         * Lists staff members with filtering
         */
        public async list(params: ListStaffRequest): Promise<ListStaffResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                department: params.department,
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                status:     params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/staff`, undefined, {query})
            return await resp.json() as ListStaffResponse
        }

        /**
         * Lists leave requests with filtering
         */
        public async listLeaveRequests(params: ListLeaveRequestsRequest): Promise<ListLeaveRequestsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                leaveType: params.leaveType,
                staffId:   params.staffId === undefined ? undefined : String(params.staffId),
                status:    params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/staff/leave-requests`, undefined, {query})
            return await resp.json() as ListLeaveRequestsResponse
        }

        /**
         * Lists staff schedules with filtering
         */
        public async listSchedules(params: ListSchedulesRequest): Promise<ListSchedulesResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                endDate:    params.endDate,
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                staffId:    params.staffId === undefined ? undefined : String(params.staffId),
                startDate:  params.startDate,
                status:     params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/staff/schedules`, undefined, {query})
            return await resp.json() as ListSchedulesResponse
        }

        /**
         * Creates a leave request for the current user
         */
        public async requestLeave(params: RequestLeaveRequest): Promise<RequestLeaveResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/staff/leave-requests`, JSON.stringify(params))
            return await resp.json() as RequestLeaveResponse
        }

        /**
         * Updates staff performance rating
         */
        public async updatePerformance(params: UpdatePerformanceRequest): Promise<UpdatePerformanceResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/staff/performance`, JSON.stringify(params))
            return await resp.json() as UpdatePerformanceResponse
        }
    }
}

export namespace tasks {
    export interface AddAttachmentRequest {
        taskId: number
        fileName: string
        fileUrl: string
        fileSize?: number
        mimeType?: string
    }

    export interface AddAttachmentResponse {
        id: number
        taskId: number
        fileName: string
        fileUrl: string
        fileSize?: number
        mimeType?: string
        uploadedByUserId: number
        createdAt: string
    }

    export interface AssignTaskRequest {
        staffId?: number
    }

    export interface AssignTaskResponse {
        success: boolean
        taskId: number
        assigneeStaffId?: number
    }

    export interface CreateTaskRequest {
        propertyId: number
        type: TaskType
        title: string
        description?: string
        priority: TaskPriority
        assigneeStaffId?: number
        dueAt?: string
        estimatedHours?: number
    }

    export interface CreateTaskResponse {
        id: number
        propertyId: number
        propertyName: string
        type: TaskType
        title: string
        description?: string
        priority: TaskPriority
        status: string
        assigneeStaffId?: number
        assigneeName?: string
        dueAt?: string
        estimatedHours?: number
        createdByUserId: number
        createdByName: string
        createdAt: string
        updatedAt: string
        completedAt?: string
        actualHours?: number
        attachmentCount: number
    }

    export interface ListTasksRequest {
        propertyId?: number
        type?: TaskType
        priority?: TaskPriority
        status?: TaskStatus
        assignee?: number | string
        overdue?: boolean
    }

    export interface ListTasksResponse {
        tasks: TaskInfo[]
    }

    export interface TaskInfo {
        id: number
        propertyId: number
        propertyName: string
        type: TaskType
        title: string
        description?: string
        priority: TaskPriority
        status: TaskStatus
        assigneeStaffId?: number
        assigneeName?: string
        dueAt?: string
        createdByUserId: number
        createdByName: string
        createdAt: string
        updatedAt: string
        completedAt?: string
        estimatedHours?: number
        actualHours?: number
        attachmentCount: number
    }

    export type TaskPriority = "low" | "med" | "high"

    export type TaskStatus = "open" | "in_progress" | "blocked" | "done"

    export type TaskType = "maintenance" | "housekeeping" | "service"

    export interface UpdateTaskHoursRequest {
        estimatedHours?: number
        actualHours?: number
    }

    export interface UpdateTaskHoursResponse {
        success: boolean
        taskId: number
        estimatedHours?: number
        actualHours?: number
    }

    export interface UpdateTaskStatusRequest {
        status: TaskStatus
    }

    export interface UpdateTaskStatusResponse {
        success: boolean
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addAttachment = this.addAttachment.bind(this)
            this.assign = this.assign.bind(this)
            this.create = this.create.bind(this)
            this.list = this.list.bind(this)
            this.updateHours = this.updateHours.bind(this)
            this.updateStatus = this.updateStatus.bind(this)
        }

        /**
         * Adds an attachment to a task
         */
        public async addAttachment(params: AddAttachmentRequest): Promise<AddAttachmentResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/tasks/attachments`, JSON.stringify(params))
            return await resp.json() as AddAttachmentResponse
        }

        /**
         * Assigns or unassigns a task to/from a staff member
         */
        public async assign(id: number, params: AssignTaskRequest): Promise<AssignTaskResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/tasks/${encodeURIComponent(id)}/assign`, JSON.stringify(params))
            return await resp.json() as AssignTaskResponse
        }

        /**
         * Creates a new task
         */
        public async create(params: CreateTaskRequest): Promise<CreateTaskResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/tasks`, JSON.stringify(params))
            return await resp.json() as CreateTaskResponse
        }

        /**
         * Lists tasks with role-based filtering
         */
        public async list(params: ListTasksRequest): Promise<ListTasksResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                assignee:   params.assignee === undefined ? undefined : String(params.assignee),
                overdue:    params.overdue === undefined ? undefined : String(params.overdue),
                priority:   params.priority === undefined ? undefined : String(params.priority),
                propertyId: params.propertyId === undefined ? undefined : String(params.propertyId),
                status:     params.status === undefined ? undefined : String(params.status),
                type:       params.type === undefined ? undefined : String(params.type),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/tasks`, undefined, {query})
            return await resp.json() as ListTasksResponse
        }

        /**
         * Updates estimated or actual hours for a task
         */
        public async updateHours(id: number, params: UpdateTaskHoursRequest): Promise<UpdateTaskHoursResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/tasks/${encodeURIComponent(id)}/hours`, JSON.stringify(params))
            return await resp.json() as UpdateTaskHoursResponse
        }

        /**
         * Updates the status of a task
         */
        public async updateStatus(id: number, params: UpdateTaskStatusRequest): Promise<UpdateTaskStatusResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/tasks/${encodeURIComponent(id)}/status`, JSON.stringify(params))
            return await resp.json() as UpdateTaskStatusResponse
        }
    }
}

export namespace uploads {
    export interface DownloadResponse {
        fileData: string
        filename: string
        mimeType: string
    }

    export interface FileInfo {
        id: number
        filename: string
        originalName: string
        mimeType: string
        fileSize: number
        uploadedAt: string
        uploadedBy: string
    }

    export interface UploadRequest {
        fileData: string
        filename: string
        mimeType: string
    }

    export interface UploadResponse {
        fileId: number
        filename: string
        url: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.downloadFile = this.downloadFile.bind(this)
            this.getFileInfo = this.getFileInfo.bind(this)
            this.uploadFile = this.uploadFile.bind(this)
        }

        /**
         * Download/serve a file
         */
        public async downloadFile(fileId: number): Promise<DownloadResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/uploads/${encodeURIComponent(fileId)}/download`)
            return await resp.json() as DownloadResponse
        }

        /**
         * Get file information without downloading
         */
        public async getFileInfo(fileId: number): Promise<FileInfo> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/uploads/${encodeURIComponent(fileId)}/info`)
            return await resp.json() as FileInfo
        }

        /**
         * Upload a file (receipt, document, etc.)
         */
        public async uploadFile(params: UploadRequest): Promise<UploadResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/uploads/file`, JSON.stringify(params))
            return await resp.json() as UploadResponse
        }
    }
}

export namespace users {
    export interface AssignPropertiesRequest {
        id: number
        propertyIds: number[]
    }

    export interface AssignPropertiesResponse {
        success: boolean
        userId: number
        propertyIds: number[]
    }

    export interface CreateUserRequest {
        email: string
        password: string
        displayName: string
        role: auth.UserRole
        /**
         * Optional: assign properties to the user on creation
         */
        propertyIds?: number[]
    }

    export interface CreateUserResponse {
        id: number
        email: string
        role: auth.UserRole
        displayName: string
        createdByUserId: number
        loginCount: number
        timezone: string
        locale: string
    }

    export interface GetUserResponse {
        id: number
        email: string
        role: auth.UserRole
        displayName: string
        createdAt: string
        lastLoginAt?: string
        propertyIds: number[]
    }

    export interface ListUsersRequest {
        role?: auth.UserRole
    }

    export interface ListUsersResponse {
        users: UserInfo[]
    }

    export interface UpdateUserActivityRequest {
        userId?: number
        activityType: "login" | "activity" | "logout"
        ipAddress?: string
        userAgent?: string
        locationData?: {
            country?: string
            region?: string
            city?: string
            latitude?: number
            longitude?: number
            timezone?: string
        }
    }

    export interface UpdateUserActivityResponse {
        success: boolean
        message: string
    }

    export interface UpdateUserRequest {
        displayName?: string
        email?: string
        password?: string
        role?: "ADMIN" | "MANAGER"
    }

    export interface UpdateUserResponse {
        success: boolean
        id: number
    }

    export interface UserInfo {
        id: number
        email: string
        role: auth.UserRole
        displayName: string
        createdByUserId?: number
        createdByName?: string
        createdAt: string
        lastLoginAt?: string
        lastActivityAt?: string
        loginCount: number
        lastLoginIp?: string
        lastLoginUserAgent?: string
        lastLoginLocation?: {
            country?: string
            region?: string
            city?: string
            latitude?: number
            longitude?: number
            timezone?: string
        }
        timezone?: string
        locale?: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.assignProperties = this.assignProperties.bind(this)
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.list = this.list.bind(this)
            this.update = this.update.bind(this)
            this.updateActivity = this.updateActivity.bind(this)
        }

        /**
         * Assigns properties to a manager (Admin only).
         * Replaces existing assignments with the provided list.
         */
        public async assignProperties(params: AssignPropertiesRequest): Promise<AssignPropertiesResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/users/assign-properties`, JSON.stringify(params))
            return await resp.json() as AssignPropertiesResponse
        }

        /**
         * Creates a new user in the organization (Admin only)
         */
        public async create(params: CreateUserRequest): Promise<CreateUserResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/users`, JSON.stringify(params))
            return await resp.json() as CreateUserResponse
        }

        /**
         * Gets user details including assigned property IDs (Admin only)
         */
        public async get(id: number): Promise<GetUserResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/users/${encodeURIComponent(id)}`)
            return await resp.json() as GetUserResponse
        }

        /**
         * Lists users in the organization (Admin only)
         */
        public async list(params: ListUsersRequest): Promise<ListUsersResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                role: params.role === undefined ? undefined : String(params.role),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/users`, undefined, {query})
            return await resp.json() as ListUsersResponse
        }

        /**
         * Updates a user's details (Admin only).
         */
        public async update(id: number, params: UpdateUserRequest): Promise<UpdateUserResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/users/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as UpdateUserResponse
        }

        /**
         * Updates user activity and login information
         */
        public async updateActivity(params: UpdateUserActivityRequest): Promise<UpdateUserActivityResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/users/activity`, JSON.stringify(params))
            return await resp.json() as UpdateUserActivityResponse
        }
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | auth.AuthParams
  | Promise<auth.AuthParams | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "hospitality-management-platform-cr8i-Generated-TS-Client (Encore/v1.49.1)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: auth.AuthParams | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
